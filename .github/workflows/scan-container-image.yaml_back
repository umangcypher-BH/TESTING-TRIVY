name: scan container image

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
        description: "docker image to scan"
      check_for_input_files:
        required: false
        default: true
        type: string
        description: "Fail build if files required by trivy to detect language vulnerabilities is not found."
      username:
        type: string
        required: true
        description: "github username"

    secrets:
      token:
        required: true
        description: "github token"

jobs:

  container-scan:
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    name: container scan

    steps:
      - name: Scan container image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ inputs.image_name }}"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH,MEDIUM"
          security-checks: vuln,config
        env:
          TRIVY_USERNAME: ${{ inputs.username }}
          TRIVY_PASSWORD: ${{ secrets.token }}

  check_contents:
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    name: check image contents

    steps:
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ inputs.username }}
          password: ${{ secrets.token }}

      - name: Check for unwanted files
        run: |
          image='${{ inputs.image_name }}'
          imagecontent_folder="./extracted"
          unwanted_files_output="unwanted_files_output.txt"
          wanted_files_output="wanted_files_output.txt"

          arr_imagename_with_colon=("${image////_}")
          arr_imagename=("${arr_imagename_with_colon//:/-}")
          image_tar_file="${arr_imagename[0]}.tar"

          docker pull "$image"
          docker create --name="tmp_$$" "$image"
          docker export tmp_$$ -o "$image_tar_file"
          docker rm tmp_$$

          rm -rf "$imagecontent_folder"
          mkdir "$imagecontent_folder"

          echo "Unzipping the extracted tar file..."
          7z x -y -o"$imagecontent_folder" "$image_tar_file"
          echo "completed 7zip"

          echo "Checking for unwanted files..."
          find "$imagecontent_folder" -type d,f | grep -E 'Jenkinsfile|/build/src$|jsdefender\.config\.json$|sonar-project\.properties$|\.editorconfig$|package-lock\.json$|/test$|\.git$|.*\.tgz$|.*\.pdb$|.*\.npmrc$|.*\.map$|root/\.npm$' -i | grep -v -E "node_modules|usr/bin/test$" -i | cat > "$unwanted_files_output"

          echo "Checking for presence of files needed for container scans..."
          find "$imagecontent_folder" -type d,f | grep -E 'packages\.lock\.json$|package\.json$' -i | grep -v -E "node_modules|usr/bin/test$" -i | cat > "$wanted_files_output"

          rm -rf "$imagecontent_folder"
          rm -f "$image_tar_file"

          HAS_VIOLATIONS=$(wc -l < "$unwanted_files_output")
          
          if(${{ inputs.check_for_input_files }});then
            HAS_NEEDED_FILES=$(wc -l < "$wanted_files_output")
          else
            HAS_NEEDED_FILES=1
          fi

          if [ "$HAS_VIOLATIONS" -gt 0 ]; then
              echo "::error ,file=,title=Unwanted files found ($image)::$( cat $unwanted_files_output | jq -R | jq -c -s '{unwantedfile: .}' )"
          fi

          if [ "$HAS_NEEDED_FILES" -lt 1 ]; then
              echo "::error ,file=,title=Needed files missing ($image)::'packages.lock.json', 'package.json' file needed for container scan are missing."
          fi

          rm -f "$unwanted_files_output"
          rm -f "$wanted_files_output"

          if [ "$HAS_VIOLATIONS" -gt 0 ] || [ "$HAS_NEEDED_FILES" -lt 1 ]; then
              exit 1
          fi
